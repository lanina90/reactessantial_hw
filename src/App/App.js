import './App.scss';
import Task1 from "../components/TODO/Task1";
import ParentEl from "../components/counter/ParentEl";
import Task3 from "../components/task3/Task3";


function App() {

  return (
    <div className="App">
      <div className="App__task">
        <div className='task-name'>
          <h2>Task1</h2>Створіть свій компонент «TODO list», він має містити: o поле введення; o кнопку додавання пункту
          (кнопка для додавання пункту має містити компонент «Icon», який приймає тип потрібної вам іконки у вигляді
          рядка (іконка формату .svg)); o кнопку біля кожного пункту для його видалення; o кнопку біля кожного пункту
          для позначки «Зроблено» (має з'явитися іконка – галочка зліва від пункту).
        </div>
        <Task1/>
      </div>

      <div className="App__task">
        <div className='task-name'>
          <h2>Task2</h2>
          <p>Компонент А рендерить компонент В. Усередині компонента В рендериться кнопка, натиском на яку збільшується
            число. Число потрібно передати до батьківського компонента за допомогою Redux і зобразити це число поряд із
            компонентом В.</p>
        </div>
        <ParentEl/>
      </div>

      <div className="App__task">
        <div className='task-name'>
          <h2>Task3</h2>
          <p>Готовий «TODO list» із завдання 3 покращити: o під'єднати бібліотеку MUI та використати її компоненти; o
            клацанням на кнопку для додавання пункту має з'явитися діалогове вікно; o всередині вікна є поле для
            введення та кнопка «Готово»; o кнопка має бути disable, поки поле введення порожнє; o після натискання на
            кнопку «Готово» діалогове вікно закривається та з'являється новий пункт у «TODO list».</p>
        </div>

        <Task3/>
      </div>

    </div>
  );
}

export default App;
